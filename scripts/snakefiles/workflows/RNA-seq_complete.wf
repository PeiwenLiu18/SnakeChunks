"""Generic work flow for the detection of diferentially expressed
genes from RNA-seq data using paired-ends sequencing type.

This workflow performs the following treatments: 

Under construction: 
 - convert short read archive files (.sra) into fastq format
 - read quality control with fastQC
 - download the reference genome
 - index the genome for subread-align
 - read mapping with subread-align (other possible aligners include: bowtie, bowtie2, tophat)
 - count the reads per gene with subread featureCounts
 - detection of differentially expressed genes with DESeq2 and/or edgeR using the SARTools package

Parameters are specified in a yaml-formatted configuration file.

Usage:
    snakemake -p -s gene-regulation/scripts/snakefiles/workflows/rna-seq_workflow_pe.py --configfile gene-regulation/examples/RNA-seq_GSE41190/RNA-seq_GSE41190.yml

    snakemake -p  -c "qsub {params.qsub}" -j 12 \
        -s gene-regulation/scripts/snakefiles/workflows/rna-seq_workflow_pe.py \
        --configfile gene-regulation/examples/RNA-seq_GSE41190/RNA-seq_GSE41190.yml \
        [targets]

Sequencing type: 	paired end

Author: 		Jeanne Cheneby, Justine Long, Lucie Khamvongsa, Claire Rioualen, Jacques van Helden
Contact: 		Jacques.van-Helden@univ-amu.fr

"""


#================================================================#
#                       Python Imports 
#================================================================#

from snakemake.utils import R
import os
import sys
import datetime
import re
import pandas as pd

wd = os.getcwd()

GENEREG_LIB = os.path.join(wd, config["dir"]["snakechunks"])

# Python includes
PYTHON = os.path.join(GENEREG_LIB, "scripts/python_lib")
include: os.path.join(PYTHON, "util.py")

#================================================================#
#                      Global variables
#================================================================#

# Samples
SAMPLE_IDS = read_table(config["metadata"]["samples"])['ID']

# Design
DESIGN = read_table(config["metadata"]["design"])
REFERENCE_COND = read_table(config["metadata"]["design"])['Reference']
TEST_COND = read_table(config["metadata"]["design"])['Test']
#REFERENCE_COND = DESIGN.iloc[:,0]
#TEST_COND = DESIGN.iloc[:,1]

# Genome & annotations
GENOME_DIR = config["dir"]["genome"]
GENOME_FASTA = os.path.join(GENOME_DIR, config["genome"]["fasta_file"])
GENOME_GFF3 = os.path.join(GENOME_DIR, config["genome"]["gff3_file"])
GENOME_GTF = os.path.join(GENOME_DIR, config["genome"]["gtf_file"])


# Data & results dir
if not ("fastq" in config["dir"].keys()):
    sys.exit("The parameter config['dir']['fastq'] should be specified in the config file.")
else:
    FASTQ_DIR = config["dir"]["fastq"]

if not ("results" in config["dir"].keys()):
    sys.exit("The parameter config['dir']['results'] should be specified in the config file.")
else:
    RESULTS_DIR = config["dir"]["results"]

if not ("samples" in config["dir"].keys()):
    SAMPLE_DIR = config["dir"]["results"]
else:
    SAMPLE_DIR = config["dir"]["samples"]

if not ("reports" in config["dir"].keys()):
    REPORTS_DIR = config["dir"]["results"]
else:
    REPORTS_DIR = config["dir"]["reports"]

if not ("diffexpr" in config["dir"].keys()):
    DEG_DIR = config["dir"]["results"]
else:
    DEG_DIR = config["dir"]["diffexpr"]

# Get seq_type
if not "seq_type" in config["metadata"].keys():
    sys.exit("Sequencing type (single or paired ends) must be defined in the config file.")

SEQ_TYPE = config["metadata"]["seq_type"]

if (SEQ_TYPE == "pe"):
    if not (("metadata" in config.keys()) and ("strands" in config["metadata"].keys())):
        sys.exit("The strands suffixes (parameter config['metadata']['strands']) should be specified in the config file for a paired ends analysis.")

    STRANDS     = config["metadata"]["strands"].split()


#================================================================#
#               Snakemake includes
#================================================================#

RULES = os.path.join(GENEREG_LIB, "scripts/snakefiles/rules")

include: os.path.join(RULES, "bam_by_pos.rules")
include: os.path.join(RULES, "bam_stats.rules")
include: os.path.join(RULES, "bam_to_bed.rules")
include: os.path.join(RULES, "bedgraph_to_tdf.rules")
include: os.path.join(RULES, "bowtie.rules")
include: os.path.join(RULES, "bowtie_index.rules")
include: os.path.join(RULES, "bowtie2.rules")
include: os.path.join(RULES, "bowtie2_index.rules")
include: os.path.join(RULES, "bwa_index.rules")
include: os.path.join(RULES, "bwa.rules")
include: os.path.join(RULES, "cutadapt.rules")
include: os.path.join(RULES, "DESeq2.rules")
include: os.path.join(RULES, "dot_graph.rules")
include: os.path.join(RULES, "dot_to_image.rules")
include: os.path.join(RULES, "fastqc.rules")
include: os.path.join(RULES, "genome_coverage_bedgraph.rules")
include: os.path.join(RULES, "genome_coverage_bedgraph_strands.rules")
include: os.path.join(RULES, "get_chrom_sizes.rules")
include: os.path.join(RULES, "index_bam.rules")
#include: os.path.join(RULES, "sartools_DESeq2.rules")
#include: os.path.join(RULES, "sartools_edgeR.rules")
#include: os.path.join(RULES, "sartools_targetfile.rules")
include: os.path.join(RULES, "subread_align.rules")
include: os.path.join(RULES, "subread_featureCounts.rules")
include: os.path.join(RULES, "subread_featureCounts_all.rules")
include: os.path.join(RULES, "subread_index.rules")
include: os.path.join(RULES, "tophat.rules")

#subworkflow mapping_wf:
#    workdir: "../../../.."
#    snakefile: config["mapping_wf"]["snakefile"]
#    configfile: config["mapping_wf"]["configfile"]

#SORTED_BAM      = expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}_sorted_pos.bam", samples=SAMPLE_IDS, prefix=PREFIX)

#================================================================#
#                         Workflow                               #
#================================================================#

#----------------------------------------------------------------#
# Workflow design (TODO)
#----------------------------------------------------------------#

if not ("trimming" in config.keys()):
    sys.exit("The parameter config['trimming'] should be specified in the config file. Empty quotes equal to no trimming.")

TRIMMING_TOOLS = config["trimming"].split()

if not ("mapping" in config.keys()):
    sys.exit("The parameter config['mapping'] should be specified in the config file.")

MAPPING_TOOLS = config["mapping"].split()

if TRIMMING_TOOLS:
    PREFIX = expand("{trimmer}_{aligner}", aligner=MAPPING_TOOLS, trimmer=TRIMMING_TOOLS)
else:
    PREFIX = expand("{aligner}", aligner=MAPPING_TOOLS)

if not ("diffexpr" in config.keys()):
    sys.exit("The parameter config['diffexpr'] should be specified in the config file.")

DIFFEXPR_TOOLS = config["diffexpr"].split()



#----------------------------------------------------------------#
# FastQC
#----------------------------------------------------------------#

#input_format = "fastq"
#if ("input_format" in config["metadata"].keys())):
#    input_format =  config["metadata"]["input_format"]


#----------------------------------------------------------------#
# Single-end
#----------------------------------------------------------------#

if (SEQ_TYPE == "se"):
    RAW_QC = expand(FASTQ_DIR + "/{samples}/{samples}_fastq_fastqc/{samples}_fastqc.html", samples=SAMPLE_IDS)

#----------------------------------------------------------------#
# Paired-ends
#----------------------------------------------------------------#

elif (SEQ_TYPE == "pe"):
    RAW_QC = expand(FASTQ_DIR + "/{samples}/{samples}_{strand}_fastq_fastqc/{samples}_{strand}_fastqc.html", samples=SAMPLE_IDS, strand=STRANDS)


else:
    sys.exit("Error: invalid 'seq_type parameter'. Must be 'se' or 'pe'")

QC = RAW_QC

#----------------------------------------------------------------#
# Trimming
#----------------------------------------------------------------#

if not ("trimming" in config.keys()):
    sys.exit("The parameter config['tools']['trimming'] should be specified in the config file. Empty quotes equal to no trimming.")

TRIMMING_TOOLS = config["trimming"].split()

if (len(TRIMMING_TOOLS) != 0):

    #----------------------------------------------------------------#
    # Single-end
    #----------------------------------------------------------------#

    if (SEQ_TYPE == "se"):

        TRIMMING    = expand(FASTQ_DIR + "/{samples}/{samples}_{trimmer}.fastq.gz", samples=SAMPLE_IDS, trimmer=TRIMMING_TOOLS)
        TRIM_QC     = expand(FASTQ_DIR + "/{samples}/{samples}_{trimmer}_fastq_fastqc/{samples}_{trimmer}_fastqc.html", samples=SAMPLE_IDS, trimmer=TRIMMING_TOOLS)

    #----------------------------------------------------------------#
    # Paired-ends
    #----------------------------------------------------------------#

    elif (SEQ_TYPE == "pe"):

        if not (("metadata" in config.keys()) and ("strands" in config["metadata"].keys())):
            sys.exit("The strands suffixes (parameter config['metadata']['strands']) should be specified in the config file for a paired ends analysis.")

        STRANDS     = config["metadata"]["strands"].split()

        TRIMMING    = expand(FASTQ_DIR + "/{samples}/{samples}_{trimmer}_{strand}.fastq.gz", samples=SAMPLE_IDS, trimmer=TRIMMING_TOOLS, strand=STRANDS)
        TRIM_QC     = expand(FASTQ_DIR + "/{samples}/{samples}_{trimmer}_{strand}_fastq_fastqc/{samples}_{trimmer}_{strand}_fastqc.html", samples=SAMPLE_IDS, trimmer=TRIMMING_TOOLS, strand=STRANDS)

    else:
        sys.exit("Error: invalid 'seq_type parameter'. Must be 'se' or 'pe'")

    QC = RAW_QC + TRIM_QC

#----------------------------------------------------------------#
# Alignment
#----------------------------------------------------------------#

INDEX = expand(GENOME_DIR + "/{aligner}/" + config["genome"]["fasta_file"], aligner=MAPPING_TOOLS)

MAPPING         = expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}.bam", samples=SAMPLE_IDS, prefix=PREFIX)

SORTED_BAM      = expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}_sorted_pos.bam", samples=SAMPLE_IDS, prefix=PREFIX)
SORTED_BAM_BAI  = expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}_sorted_pos.bam.bai", samples=SAMPLE_IDS, prefix=PREFIX)
BAM_STATS       = expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}_bam_stats.txt", samples=SAMPLE_IDS, prefix=PREFIX)
SORTED_BED      = expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}_sorted_pos.bed", samples=SAMPLE_IDS, prefix=PREFIX)

GENOME_COV_GZ   = expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}.bedgraph.gz", samples=SAMPLE_IDS, prefix=PREFIX)
GENOME_COV_TDF  = expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}.tdf", samples=SAMPLE_IDS, prefix=PREFIX)
GENOME_COV_BW   = expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}.bw", samples=SAMPLE_IDS, prefix=PREFIX)
GENOME_COV_PLUS = expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}_plus_strand.bedgraph", samples=SAMPLE_IDS, prefix=PREFIX) 
GENOME_COV_MINUS= expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}_minus_strand.bedgraph", samples=SAMPLE_IDS, prefix=PREFIX) 

ALL_COVERAGE    = GENOME_COV_GZ, GENOME_COV_BW, GENOME_COV_TDF, GENOME_COV_PLUS, GENOME_COV_MINUS

#----------------------------------------------------------------#
# Counting features
#----------------------------------------------------------------#

COUNTING_TOOLS = config["read_counts"].split()
FEATURE_COUNTS_PER_SAMPLE   = expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}_{read_counts}.tab", samples=SAMPLE_IDS, prefix=PREFIX, read_counts=COUNTING_TOOLS) ##, feature_type=} , feature=config["subread-featureCounts"]["feature_type"])
ALL_FEATURE_COUNTS          = expand(DEG_DIR + "/{prefix}_{read_counts}_all.txt", prefix=PREFIX, read_counts=COUNTING_TOOLS) ##, feature_type=} , feature=config["subread-featureCounts"]["feature_type"])

#----------------------------------------------------------------#
# DEG analysis
#----------------------------------------------------------------#

#SARTOOLS_TARGETFILE = expand(expand(DEG_DIR + "/{test}_vs_{ref}/{{prefix}}_{{read_counts}}_SARTools_targetfile.txt", test=TEST_COND, ref=REFERENCE_COND), prefix=PREFIX, read_counts=COUNTING_TOOLS)
DEG = expand(expand(DEG_DIR + "/{test}_vs_{ref}/{{deg}}/{test}_vs_{ref}_{{prefix}}_{{read_counts}}_{{deg}}_report.html", zip, test=TEST_COND, ref=REFERENCE_COND), deg=DIFFEXPR_TOOLS, prefix=PREFIX, read_counts=COUNTING_TOOLS)
#GENE_LIST = expand(expand(DEG_DIR + "/{test}_vs_{ref}/{{deg}}/{test}_vs_{ref}_{{prefix}}_{{read_counts}}_{{deg}}_gene_list.tab", zip, test=TEST_COND, ref=REFERENCE_COND), deg=DIFFEXPR_TOOLS, prefix=PREFIX, read_counts=COUNTING_TOOLS)

DESEQ2 = expand(expand(DEG_DIR + "/{test}_vs_{ref}/{{deg}}/{test}_vs_{ref}_{{prefix}}_{{read_counts}}_{{deg}}_report.html", zip, test=TEST_COND, ref=REFERENCE_COND), deg=DIFFEXPR_TOOLS, prefix=PREFIX, read_counts=COUNTING_TOOLS)

##----------------------------------------------------------------#
## Transcripts search
##----------------------------------------------------------------#

#TRANSCRIPTS_TOOLS = config["tools"]["infer_transcripts"].split()
#INFER_TRANSCRIPTS = expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}_{infer_transcripts}/transcripts.gtf", samples=SAMPLE_IDS, prefix=PREFIX, infer_transcripts=TRANSCRIPTS_TOOLS)



## Graphics & reports
GRAPHICS = expand(REPORTS_DIR + "/flowcharts/RNA-seq_{graph}.{ext}", graph=["dag", "rulegraph"], ext=["png"])

#================================================================#
#                        Rule all                                #
#================================================================#

rule all: 
	"""
	Run analyses.
	"""
	input: 
#            mapping_wf(expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}_sorted_pos.bam", samples=SAMPLE_IDS, prefix=PREFIX)),
#            MAPPING,
#            SORTED_BAM,
#            SORTED_BAM_BAI,
#            BAM_STATS,
#            ALL_COVERAGE,
#            FEATURE_COUNTS_PER_SAMPLE,
            ALL_FEATURE_COUNTS,
#            SARTOOLS_TARGETFILE,
            DESEQ2,
#            DEG,
#            INFER_TRANSCRIPTS,
            GRAPHICS
	params: qsub=config["qsub"]
	shell: "echo Job done    `date '+%Y-%m-%d %H:%M'`"

