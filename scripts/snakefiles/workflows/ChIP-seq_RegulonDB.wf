"""Generic workflow for the analysis of ChIP-seq data for the binding
of transcription factors.


This workflow performs the following treatments: 

 - peak-calling with alternate peak-calling programs
 - motif discovery

The parameters are specified in a yaml-formatted configuration file.

Usage:

1. Run in command line mode

    snakemake -p -s gene-regulation/scripts/snakefiles/workflows/chip-seq_workflow_SE.py 
        --configfile path/to/specific/config_file.yml \
        [targets]

2. Send tasks to qsub job scheduler

    snakemake -p -c "qsub {params.qsub}" -j 12 \
        -s gene-regulation/scripts/snakefiles/workflows/chip-seq_workflow_SE.py \
        --configfile path/to/specific/config_file.yml \
        [targets]

Author: Claire Rioualen, Jacques van Helden
Contact: claire.rioualen@inserm.fr

"""

#================================================================#
#                       Python Imports 
#================================================================#

from snakemake.utils import R
import os
import sys
import datetime
import re
import pandas as pd
from pathlib import Path

wd = os.getcwd()

GENEREG_LIB = os.path.join(wd, config["dir"]["snakechunks"])

include: os.path.join(GENEREG_LIB, "scripts/python_lib/util.py")


#================================================================#
#           Variables & directories
#================================================================#

# Genome & annotations
GENOME_DIR = config["dir"]["genome"]
GENOME_FASTA = os.path.join(GENOME_DIR, config["genome"]["fasta_file"])
GENOME_GFF3 = os.path.join(GENOME_DIR, config["genome"]["gff3_file"])
GENOME_GTF = os.path.join(GENOME_DIR, config["genome"]["gtf_file"])

# Samples
SAMPLE_IDS = read_table(config["metadata"]["samples"])['ID']

# Design
DESIGN = read_table(config["metadata"]["design"])
TREATMENT = DESIGN['treatment']
CONTROL = DESIGN['control']

## Data & results dir
if not (("dir" in config.keys()) and ("reads_source" in config["dir"].keys())):
    sys.exit("The parameter config['dir']['reads_source'] should be specified in the config file.")
else:
    READS = config["dir"]["reads_source"]

if not ("fastq" in config["dir"].keys()):
    sys.exit("The parameter config['dir']['fastq'] should be specified in the config file.")
else:
    FASTQ_DIR = config["dir"]["fastq"]

if not ("results" in config["dir"].keys()):
    sys.exit("The parameter config['dir']['results'] should be specified in the config file.")
else:
    RESULTS_DIR = config["dir"]["results"]

if not ("samples" in config["dir"].keys()):
    SAMPLE_DIR = config["dir"]["results"]
else:
    SAMPLE_DIR = config["dir"]["samples"]

if not ("reports" in config["dir"].keys()):
    REPORTS_DIR = config["dir"]["results"]
else:
    REPORTS_DIR = config["dir"]["reports"]

if not ("peaks" in config["dir"].keys()):
    PEAKS_DIR = config["dir"]["results"]
else:
    PEAKS_DIR = config["dir"]["peaks"]


#================================================================#
#               Snakemake rules
#================================================================#

RULES = os.path.join(GENEREG_LIB, "scripts/snakefiles/rules")

include: os.path.join(RULES, "annotate_peaks.rules")
include: os.path.join(RULES, "bam_by_pos.rules")
include: os.path.join(RULES, "bam_to_bed.rules")
include: os.path.join(RULES, "bam_stats.rules")
include: os.path.join(RULES, "bed_formatting.rules")
include: os.path.join(RULES, "bedgraph_to_tdf.rules")
include: os.path.join(RULES, "bedtools_closest.rules")
include: os.path.join(RULES, "bedtools_intersect.rules")
include: os.path.join(RULES, "bedtools_window.rules")
include: os.path.join(RULES, "bowtie_index.rules")
include: os.path.join(RULES, "bowtie.rules")
include: os.path.join(RULES, "bowtie2_index.rules")
include: os.path.join(RULES, "bowtie2.rules")
include: os.path.join(RULES, "bPeaks.rules")
include: os.path.join(RULES, "bwa_index.rules")
include: os.path.join(RULES, "bwa.rules")
include: os.path.join(RULES, "dot_graph.rules")
include: os.path.join(RULES, "dot_to_image.rules")
include: os.path.join(RULES, "fastqc.rules")
include: os.path.join(RULES, "genome_coverage_bedgraph.rules")
include: os.path.join(RULES, "genome_coverage_bedgraph_strands.rules")
include: os.path.join(RULES, "genome_coverage_bigwig.rules")
include: os.path.join(RULES, "getfasta.rules")
include: os.path.join(RULES, "get_chrom_sizes.rules")
include: os.path.join(RULES, "gzip.rules")
include: os.path.join(RULES, "homer.rules")
#include: os.path.join(RULES, "html_report.rules")
include: os.path.join(RULES, "igv_session.rules")
include: os.path.join(RULES, "index_bam.rules")
include: os.path.join(RULES, "index_fasta.rules")
include: os.path.join(RULES, "macs2.rules")
include: os.path.join(RULES, "macs14.rules")
include: os.path.join(RULES, "mosaics.rules")
include: os.path.join(RULES, "peak_motifs.rules")
include: os.path.join(RULES, "peaks_vs_tfbs.rules")
include: os.path.join(RULES, "regulondb_download.rules")
include: os.path.join(RULES, "regulondb_download_one_tf.rules")
include: os.path.join(RULES, "spp.rules")
include: os.path.join(RULES, "sickle.rules")
include: os.path.join(RULES, "subread_index.rules")
include: os.path.join(RULES, "subread_align.rules")
#include: os.path.join(RULES, "swembl.rules")


#================================================================#
#                         Workflow                               #
#================================================================#


#----------------------------------------------------------------#
# Workflow design
#----------------------------------------------------------------#

if not ("trimming" in config.keys()):
    sys.exit("The parameter config['trimming'] should be specified in the config file. Empty quotes equal to no trimming.")

TRIMMING_TOOLS = config["trimming"].split()

if not ("mapping" in config.keys()):
    sys.exit("The parameter config['mapping'] should be specified in the config file.")

MAPPING_TOOLS = config["mapping"].split()

if TRIMMING_TOOLS:
    PREFIX = expand("{trimmer}_{aligner}", aligner=MAPPING_TOOLS, trimmer=TRIMMING_TOOLS)
else:
    PREFIX = expand("{aligner}", aligner=MAPPING_TOOLS)


# ----------------------------------------------------------------
# Peak-calling
# ----------------------------------------------------------------

if not ("peakcalling" in config.keys()):
    sys.exit("The parameter config['peakcalling'] should be specified in the config file.")

PEAKCALLING_TOOLS = config["peakcalling"].split()
PEAKS       = expand(expand(PEAKS_DIR + "/{treat}_vs_{control}/{{peakcaller}}/{treat}_vs_{control}_{{prefix}}_{{peakcaller}}.bed", zip, treat=TREATMENT, control=CONTROL), peakcaller=PEAKCALLING_TOOLS, prefix=PREFIX)
GET_FASTA   = expand(expand(PEAKS_DIR + "/{treat}_vs_{control}/{{peakcaller}}/{treat}_vs_{control}_{{prefix}}_{{peakcaller}}.fasta", zip, treat=TREATMENT, control=CONTROL), peakcaller=PEAKCALLING_TOOLS, prefix=PREFIX)

# ----------------------------------------------------------------
# Peak annotation
# ----------------------------------------------------------------

# if not ("annotation" in config.keys()):
#     sys.exit("The parameter config['tools']['annotation'] should be specified in the config file.")

# DISTANCE = config["annotation"].split()
# GENOMIC_FEAT    = expand(expand(PEAKS_DIR + "/{treat}_vs_{control}/{{peakcaller}}/{treat}_vs_{control}_{{prefix}}_{{peakcaller}}_{{distance}}_annot.bed", zip, treat=TREATMENT, control=CONTROL), peakcaller=PEAKCALLING_TOOLS, distance=DISTANCE, prefix=PREFIX)

GENE_LIST      = expand(expand(PEAKS_DIR + "/{treat}_vs_{control}/{{peakcaller}}/{treat}_vs_{control}_{{prefix}}_{{peakcaller}}_gene_list.tsv", zip, treat=TREATMENT, control=CONTROL), peakcaller=PEAKCALLING_TOOLS, prefix=PREFIX)

PEAK_MOTIFS     = expand(expand(PEAKS_DIR + "/{treat}_vs_{control}/{{peakcaller}}/peak-motifs/{treat}_vs_{control}_{{prefix}}_{{peakcaller}}_peak-motifs/peak-motifs_synthesis.html", zip, treat=TREATMENT, control=CONTROL), peakcaller=PEAKCALLING_TOOLS, prefix=PREFIX)

REGULONDB_SITES = config["dir"]["regulondb"] + "/BindingSiteSet.bed"
REGULONDB_TF_SITES = expand(config["dir"]["regulondb"] + "/{TF}/{TF}_BS.bed", TF=config["metadata"]["TF"].split())

TFBS_MATCHING_PEAKS       = expand(expand(PEAKS_DIR + "/{treat}_vs_{control}/{{peakcaller}}/{treat}_vs_{control}_{{prefix}}_{{peakcaller}}_vs_{{TF}}_matching_peaks.bed", zip, treat=TREATMENT, control=CONTROL), peakcaller=PEAKCALLING_TOOLS, prefix=PREFIX, TF=config["metadata"]["TF"].split())

PEAK_MATCHING_TFBS       = expand(expand(PEAKS_DIR + "/{treat}_vs_{control}/{{peakcaller}}/{treat}_vs_{control}_{{prefix}}_{{peakcaller}}_vs_{{TF}}_matching_sites.bed", zip, treat=TREATMENT, control=CONTROL), peakcaller=PEAKCALLING_TOOLS, prefix=PREFIX, TF=config["metadata"]["TF"].split())

PEAKS_VS_TFBS = TFBS_MATCHING_PEAKS + PEAK_MATCHING_TFBS

# ----------------------------------------------------------------
# Flowcharts
# ----------------------------------------------------------------

GRAPHICS = expand(REPORTS_DIR + "/flowcharts/ChIP-seq_{graph}.{ext}", graph=["dag", "rulegraph"], ext=["png", "pdf", "svg"])

# ----------------------------------------------------------------
# Reports
# ----------------------------------------------------------------

#HTML_REPORT = REPORTS_DIR + "/html_report/index.html"

#igv_session(xml_file, genome=GENOME_FASTA, gff3=GENOME_GFF3, gtf=GENOME_GTF, peaks=PEAKS, coverage=GENOME_COV_GZ)
#IGV_SESSION = REPORTS_DIR + "/igv_session.xml"
#        session = "{dir}/{treatment}_vs_{control}{preprocess,.*}_igv.html"
#IGV_SESSION         = expand(REPORTS_DIR + "/{treat}_vs_{control}_igv.xml", zip, treat=TREATMENT, control=CONTROL)

FORMAT_PEAKS        = expand(expand(PEAKS_DIR + "/{treat}_vs_{control}/{{peakcaller}}/{treat}_vs_{control}_{{prefix}}_{{peakcaller}}_formatted.bed", zip, treat=TREATMENT, control=CONTROL), peakcaller=PEAKCALLING_TOOLS, prefix=PREFIX)

#================================================================#
#                        Rule all                                #
#================================================================#

rule all: 
	"""
	Run analyses.
	"""
	input: \
           REGULONDB_SITES,
           REGULONDB_TF_SITES,
            PEAKS,
            PEAKS_VS_TFBS,
#            FORMAT_PEAKS,
            GET_FASTA,
#            GENOMIC_FEAT,
            GENE_LIST,
#            PEAK_MOTIFS,
#            HTML_REPORT,
#            IGV_SESSION,
            GRAPHICS
	params: qsub=config["qsub"]
	shell: "echo Job done    `date '+%Y-%m-%d %H:%M'`"



