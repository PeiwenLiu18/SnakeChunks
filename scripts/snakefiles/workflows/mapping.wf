"""Generic workflow for the analysis of ChIP-seq data for the binding
of transcription factors.


This workflow performs the following treatments: 

 - quality check
 - read mapping
 - peak-calling with alternate peak-calling programs
 - motif discovery

The parameters are specified in a yaml-formatted configuration file.

Usage:

1. Run in command line mode

    snakemake -p -s SnakeChunks/scripts/snakefiles/workflows/mapping.wf \
        --configfile metadata/your_config_file.yml \
        [targets]

2. Send tasks to qsub job scheduler

    snakemake -p -c "qsub {params.qsub}" -j 12 \
        -s SnakeChunks/scripts/snakefiles/workflows/mapping.wf \
        --configfile metadata/your_config_file.yml \
        [targets]

Author: Claire Rioualen, Jacques van Helden
Contact: claire.rioualen@inserm.fr

"""

#================================================================#
#                       Python Imports 
#================================================================#

from snakemake.utils import R
import os
import sys
import datetime
import re
import pandas as pd
from pathlib import Path

wd = os.getcwd()

GENEREG_LIB = os.path.join(wd, config["dir"]["snakechunks"])

# Python includes
PYTHON = os.path.join(GENEREG_LIB, "scripts/python_lib")
include: os.path.join(PYTHON, "util.py")

#================================================================#
#           Variables & directories
#================================================================#

# Genome & annotations
GENOME_DIR = config["dir"]["genome"]
GENOME_FASTA = os.path.join(GENOME_DIR, config["genome"]["fasta_file"])
GENOME_GFF3 = os.path.join(GENOME_DIR, config["genome"]["gff3_file"])
GENOME_GTF = os.path.join(GENOME_DIR, config["genome"]["gtf_file"])

# Samples
SAMPLE_IDS = read_table(config["metadata"]["samples"])['ID']

## Data & results dir
if not (("dir" in config.keys()) and ("reads_source" in config["dir"].keys())):
    sys.exit("The parameter config['dir']['reads_source'] should be specified in the config file.")
else:
    READS = config["dir"]["reads_source"]

if not ("fastq" in config["dir"].keys()):
    sys.exit("The parameter config['dir']['fastq'] should be specified in the config file.")
else:
    FASTQ_DIR = config["dir"]["fastq"]

if not ("results" in config["dir"].keys()):
    sys.exit("The parameter config['dir']['results'] should be specified in the config file.")
else:
    RESULTS_DIR = config["dir"]["results"]

if not ("samples" in config["dir"].keys()):
    SAMPLE_DIR = config["dir"]["results"]
else:
    SAMPLE_DIR = config["dir"]["samples"]

if not ("reports" in config["dir"].keys()):
    REPORTS_DIR = config["dir"]["results"]
else:
    REPORTS_DIR = config["dir"]["reports"]

if not ("peaks" in config["dir"].keys()):
    PEAKS_DIR = config["dir"]["results"]
else:
    PEAKS_DIR = config["dir"]["peaks"]


#================================================================#
#               Snakemake rules
#================================================================#

RULES = os.path.join(GENEREG_LIB, "scripts/snakefiles/rules")

include: os.path.join(RULES, "bam_by_pos.rules")
include: os.path.join(RULES, "bam_to_bed.rules")
include: os.path.join(RULES, "bam_stats.rules")
include: os.path.join(RULES, "bed_formatting.rules")
include: os.path.join(RULES, "bedgraph_to_tdf.rules")
include: os.path.join(RULES, "bedtools_closest.rules")
include: os.path.join(RULES, "bedtools_intersect.rules")
include: os.path.join(RULES, "bedtools_window.rules")
include: os.path.join(RULES, "bowtie_index.rules")
include: os.path.join(RULES, "bowtie.rules")
include: os.path.join(RULES, "bowtie2_index.rules")
include: os.path.join(RULES, "bowtie2.rules")
include: os.path.join(RULES, "bwa_index.rules")
include: os.path.join(RULES, "bwa.rules")
include: os.path.join(RULES, "dot_graph.rules")
include: os.path.join(RULES, "dot_to_image.rules")
include: os.path.join(RULES, "fastqc.rules")
include: os.path.join(RULES, "genome_coverage_bedgraph.rules")
include: os.path.join(RULES, "genome_coverage_bedgraph_strands.rules")
include: os.path.join(RULES, "genome_coverage_bigwig.rules")
include: os.path.join(RULES, "getfasta.rules")
include: os.path.join(RULES, "get_chrom_sizes.rules")
include: os.path.join(RULES, "gzip.rules")
include: os.path.join(RULES, "hisat2_index.rules")
include: os.path.join(RULES, "hisat2.rules")
include: os.path.join(RULES, "index_bam.rules")
include: os.path.join(RULES, "md5sum.rules")
include: os.path.join(RULES, "sickle.rules")
include: os.path.join(RULES, "subread_index.rules")
include: os.path.join(RULES, "subread_align.rules")
include: os.path.join(RULES, "tophat.rules")


#================================================================#
#                         Workflow                               #
#================================================================#


#----------------------------------------------------------------#
# Workflow design
#----------------------------------------------------------------#

if not ("trimming" in config.keys()):
    sys.exit("The parameter config['trimming'] should be specified in the config file. Empty quotes equal to no trimming.")

TRIMMING_TOOLS = config["trimming"].split()

if not ("mapping" in config.keys()):
    sys.exit("The parameter config['mapping'] should be specified in the config file.")

MAPPING_TOOLS = config["mapping"].split()

if TRIMMING_TOOLS:
    PREFIX = expand("{trimmer}_{aligner}", aligner=MAPPING_TOOLS, trimmer=TRIMMING_TOOLS)
else:
    PREFIX = expand("{aligner}", aligner=MAPPING_TOOLS)

#----------------------------------------------------------------#
# Alignment
#----------------------------------------------------------------#


INDEX = expand(GENOME_DIR + "/{aligner}/" + config["genome"]["fasta_file"], aligner=MAPPING_TOOLS)

MAPPING         = expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}.bam", samples=SAMPLE_IDS, prefix=PREFIX)
MAPPING_MD5     = expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}.bam.md5sum", samples=SAMPLE_IDS, prefix=PREFIX)
MAPPING_QC      = expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}_bam_qc/{samples}_{prefix}_fastqc.html", samples=SAMPLE_IDS, prefix=PREFIX)

BAM_BAI  = expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}.bam.bai", samples=SAMPLE_IDS, prefix=PREFIX)
BAM_STATS       = expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}_bam_stats.txt", samples=SAMPLE_IDS, prefix=PREFIX)

GENOME_COV_BDG  = expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}.bedgraph", samples=SAMPLE_IDS, prefix=PREFIX)
GENOME_COV_TDF  = expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}.tdf", samples=SAMPLE_IDS, prefix=PREFIX)
GENOME_COV_BW   = expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}.bw", samples=SAMPLE_IDS, prefix=PREFIX)
GENOME_COV_PLUS = expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}_plus_strand.tdf", samples=SAMPLE_IDS, prefix=PREFIX) 
GENOME_COV_MINUS= expand(SAMPLE_DIR + "/{samples}/{samples}_{prefix}_minus_strand.tdf", samples=SAMPLE_IDS, prefix=PREFIX) 

ALL_COVERAGE    = GENOME_COV_BDG, GENOME_COV_PLUS, GENOME_COV_MINUS, GENOME_COV_TDF


# ----------------------------------------------------------------
# Flowcharts
# ----------------------------------------------------------------

GRAPHICS = expand(REPORTS_DIR + "/flowcharts/mapping_{graph}.{ext}", graph=["dag", "rulegraph"], ext=["png", "pdf", "svg"])

# ----------------------------------------------------------------
# Reports
# ----------------------------------------------------------------

#HTML_REPORT = REPORTS_DIR + "/html_report/index.html"
#MULTIQC_REPORT = REPORTS_DIR + "/multiqc_report.html"

#igv_session(xml_file, genome=GENOME_FASTA, gff3=GENOME_GFF3, gtf=GENOME_GTF, peaks=PEAKS, coverage=GENOME_COV_GZ)
#IGV_SESSION = REPORTS_DIR + "/igv_session.xml"


#================================================================#
#                        Rule all                                #
#================================================================#

rule all: 
	"""
	Run analyses.
	"""
	input: \
            MAPPING,
            MAPPING_QC,
            MAPPING_MD5,
            BAM_STATS,
            BAM_BAI,
#            GENOME_INDEX,
            ALL_COVERAGE,
            GRAPHICS
	params: qsub=config["qsub"]
	shell: "echo Job done    `date '+%Y-%m-%d %H:%M'`"



