
#================================================================#
#                       Python Imports 
#================================================================#

from snakemake.utils import R
import os
import sys
import datetime
import re
import pandas as pd

wd = os.getcwd()

GENEREG_LIB = os.path.join(wd, "SnakeChunks")

## Python includes
#PYTHON = os.path.join(GENEREG_LIB, "scripts/python_lib")

include: os.path.join(GENEREG_LIB, "scripts/python_lib/util.py")


#================================================================#
#                      ChIP & RNA samples
#================================================================#

# ChIP-seq
chip_sample_ids = read_table("metadata/samples_ChIP-seq.tab")['ID']
chip_treatment = read_table("metadata/design_ChIP-seq.tab")['Treatment']
chip_control = read_table("metadata/design_ChIP-seq.tab")['Control']

# RNA-seq  
rna_sample_ids = read_table("metadata/samples_RNA-seq.tab")['ID']
rna_reference = read_table("metadata/design_RNA-seq.tab")['Reference']
rna_test = read_table("metadata/design_RNA-seq.tab")['Test']

#================================================================#
#               Snakemake rules
#================================================================#

RULES = os.path.join(GENEREG_LIB, "scripts/snakefiles/rules")

include: os.path.join(RULES, "annotate_peaks.rules")
include: os.path.join(RULES, "bam_by_pos.rules")
include: os.path.join(RULES, "bam_to_bed.rules")
include: os.path.join(RULES, "bam_stats.rules")
include: os.path.join(RULES, "bed_formatting.rules")
include: os.path.join(RULES, "bedgraph_to_tdf.rules")
include: os.path.join(RULES, "bedtools_closest.rules")
include: os.path.join(RULES, "bedtools_intersect.rules")
include: os.path.join(RULES, "bedtools_window.rules")
include: os.path.join(RULES, "bowtie_index.rules")
include: os.path.join(RULES, "bowtie.rules")
include: os.path.join(RULES, "bowtie2_index.rules")
include: os.path.join(RULES, "bowtie2.rules")
include: os.path.join(RULES, "bPeaks.rules")
include: os.path.join(RULES, "bwa_index.rules")
include: os.path.join(RULES, "bwa.rules")
include: os.path.join(RULES, "fastqc.rules")
include: os.path.join(RULES, "gene_lists_vs_regulondb.rules")
include: os.path.join(RULES, "genome_coverage_bedgraph.rules")
include: os.path.join(RULES, "genome_coverage_bedgraph_strands.rules")
include: os.path.join(RULES, "genome_coverage_bigwig.rules")
include: os.path.join(RULES, "getfasta.rules")
include: os.path.join(RULES, "get_chrom_sizes.rules")
include: os.path.join(RULES, "gzip.rules")
include: os.path.join(RULES, "homer.rules")
include: os.path.join(RULES, "index_bam.rules")
include: os.path.join(RULES, "index_fasta.rules")
include: os.path.join(RULES, "macs2.rules")
include: os.path.join(RULES, "macs14.rules")
include: os.path.join(RULES, "mosaics.rules")
include: os.path.join(RULES, "peak_motifs.rules")
include: os.path.join(RULES, "peaks_vs_tfbs.rules")
include: os.path.join(RULES, "regulondb_download.rules")
include: os.path.join(RULES, "regulondb_download_one_tf.rules")
include: os.path.join(RULES, "spp.rules")
include: os.path.join(RULES, "sickle.rules")
include: os.path.join(RULES, "subread_index.rules")
include: os.path.join(RULES, "subread_align.rules")
#include: os.path.join(RULES, "swembl.rules")
include: os.path.join(RULES, "tophat.rules")

## Workflow design ##

trimming = config["trimming"]
mapping_chip = config["mapping_chip"]
mapping_rna = config["mapping_rna"]
peakcalling = config["peakcalling"]
read_counts = config["read_counts"]
diffexpr = config["diffexpr"]
TF=config["metadata"]["TF"]

#prefix = config["trimming"] + "_" + config["mapping"]

## Directories

PEAKS_DIR = "ChIP-seq/results/peaks"
DEG_DIR = "RNA-seq/results/diffexpr"
REGULON_DIR = "data/RegulonDB"

INTEGRATION_DIR = "integration" 

## Final targets ##

outdir_prefix = "ChIP-RNA-regulons"
venn_format = "png" # svg"

VENN = expand(INTEGRATION_DIR + "/" + outdir_prefix + "_venn.{ext}", ext=venn_format)
TABLE = INTEGRATION_DIR + "/" + outdir_prefix + "_gene_table.tsv"
GFF_CHIP = INTEGRATION_DIR + "/" + outdir_prefix + "_ChIP-seq.gff"
GFF_RNA = INTEGRATION_DIR + "/" + outdir_prefix + "_RNA-seq.gff"
GFF_REGULON = INTEGRATION_DIR + "/" + outdir_prefix + "_RegulonDB.gff"



rule all: 
    input:
        VENN,
        TABLE, 
        GFF_CHIP,
        GFF_RNA, 
        GFF_REGULON




