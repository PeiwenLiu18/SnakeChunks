
#================================================================#
#                       Python Imports 
#================================================================#

from snakemake.utils import R
import os
import sys
import datetime
import re
import pandas as pd

wd = os.getcwd()

GENEREG_LIB = os.path.join(wd, "SnakeChunks")

## Python includes
#PYTHON = os.path.join(GENEREG_LIB, "scripts/python_lib")

include: os.path.join(GENEREG_LIB, "scripts/python_lib/util.py")


#================================================================#
#                      ChIP & RNA samples
#================================================================#

# ChIP-seq
chip_sample_ids = read_table("metadata/samples_ChIP-seq.tab")['ID']
chip_treatment = read_table("metadata/design_ChIP-seq.tab")['Treatment']
chip_control = read_table("metadata/design_ChIP-seq.tab")['Control']

# RNA-seq  
rna_sample_ids = read_table("metadata/samples_RNA-seq.tab")['ID']
rna_reference = read_table("metadata/design_RNA-seq.tab")['Reference']
rna_test = read_table("metadata/design_RNA-seq.tab")['Test']

#================================================================#
#               Snakemake rules
#================================================================#

RULES = os.path.join(GENEREG_LIB, "scripts/snakefiles/rules")

include: os.path.join(RULES, "annotate_peaks.rules")
include: os.path.join(RULES, "bam_by_pos.rules")
include: os.path.join(RULES, "bam_to_bed.rules")
include: os.path.join(RULES, "bam_stats.rules")
include: os.path.join(RULES, "bed_formatting.rules")
include: os.path.join(RULES, "bedgraph_to_tdf.rules")
include: os.path.join(RULES, "bedtools_closest.rules")
include: os.path.join(RULES, "bedtools_intersect.rules")
include: os.path.join(RULES, "bedtools_window.rules")
include: os.path.join(RULES, "bowtie_index.rules")
include: os.path.join(RULES, "bowtie.rules")
include: os.path.join(RULES, "bowtie2_index.rules")
include: os.path.join(RULES, "bowtie2.rules")
include: os.path.join(RULES, "bPeaks.rules")
include: os.path.join(RULES, "bwa_index.rules")
include: os.path.join(RULES, "bwa.rules")
include: os.path.join(RULES, "fastqc.rules")
include: os.path.join(RULES, "genome_coverage_bedgraph.rules")
include: os.path.join(RULES, "genome_coverage_bedgraph_strands.rules")
include: os.path.join(RULES, "genome_coverage_bigwig.rules")
include: os.path.join(RULES, "getfasta.rules")
include: os.path.join(RULES, "get_chrom_sizes.rules")
include: os.path.join(RULES, "gzip.rules")
include: os.path.join(RULES, "homer.rules")
include: os.path.join(RULES, "index_bam.rules")
include: os.path.join(RULES, "index_fasta.rules")
include: os.path.join(RULES, "macs2.rules")
include: os.path.join(RULES, "macs14.rules")
include: os.path.join(RULES, "mosaics.rules")
include: os.path.join(RULES, "peak_motifs.rules")
include: os.path.join(RULES, "peaks_vs_tfbs.rules")
include: os.path.join(RULES, "regulondb_download.rules")
include: os.path.join(RULES, "regulondb_download_one_tf.rules")
include: os.path.join(RULES, "spp.rules")
include: os.path.join(RULES, "sickle.rules")
include: os.path.join(RULES, "subread_index.rules")
include: os.path.join(RULES, "subread_align.rules")
#include: os.path.join(RULES, "swembl.rules")
include: os.path.join(RULES, "tophat.rules")

## Workflow design ##

trimming = config["trimming"]
mapping_chip = config["mapping_chip"]
mapping_rna = config["mapping_rna"]
peakcalling = config["peakcalling"]
read_counts = config["read_counts"]
diffexpr = config["diffexpr"]
TF=config["metadata"]["TF"]

#prefix = config["trimming"] + "_" + config["mapping"]

## Directories

PEAKS_DIR = "ChIP-seq/results/peaks"
DEG_DIR = "RNA-seq/results/diffexpr"
REGULON_DIR = "data/RegulonDB"

INTEGRATION_DIR = "integration" 

## Final targets ##

outdir_prefix = "ChIP-RNA-regulons"
peak_prefixes = expand(outdir_prefix + "_{peakcaller}_peaks", peakcaller = peakcalling)
venn_format = "png" # svg"

VENN = expand(INTEGRATION_DIR + "/{peak_prefix}_venn.{ext}", ext=venn_format, peak_prefix = peak_prefixes)
TABLE = expand(INTEGRATION_DIR + "/{peak_prefix}_gene_table.tsv", peak_prefix = peak_prefixes)
GFF_CHIP = expand(INTEGRATION_DIR + "/{peak_prefix}_ChIP-seq.gff", peak_prefix = peak_prefixes)
GFF_RNA = INTEGRATION_DIR + "/" + outdir_prefix + "_RNA-seq.gff"
GFF_REGULON = INTEGRATION_DIR + "/" + outdir_prefix + "_RegulonDB.gff"

rule all: 
    input:
        VENN,
        TABLE, 
        GFF_CHIP,
        GFF_RNA, 
        GFF_REGULON

## Genes reported as differentially expressed by  DESeq2.rules
DESEQ2_DEG_LIST=expand(expand(DEG_DIR + "/{test}_vs_{ref}/{{deg}}/{test}_vs_{ref}_{{trimming}}_{{mapping_rna}}_{{read_counts}}_{{deg}}_gene_list.txt", zip, test=rna_test, ref=rna_reference), deg=diffexpr, trimming=trimming, mapping_rna=mapping_rna, read_counts=read_counts)

## Genes reported as differentially expressed by  rnaseq_deg.rules, which combines DESeq2 and edgeR
## 
DEG_LIST=expand(expand(DEG_DIR + "/{test}_vs_{ref}/{{trimming}}_{{mapping_rna}}_{{read_counts}}_{test}_vs_{ref}_DEG_list.txt", zip, test=rna_test, ref=rna_reference), deg=diffexpr, trimming=trimming, mapping_rna=mapping_rna, read_counts=read_counts)


rule genelists_vs_regulondb:
    input:
        chip_genes = expand(expand(PEAKS_DIR + "/{treat}_vs_{control}/{{peakcaller}}/{treat}_vs_{control}_{{trimming}}_{{mapping_chip}}_{{peakcaller}}_gene_list.txt", zip, treat=chip_treatment, control=chip_control), peakcaller=peakcalling, trimming=trimming, mapping_chip=mapping_chip),
        rna_genes = DEG_LIST,
#        rna_genes = DESEQ2_DEG_LIST,
        regulondb_tus = REGULON_DIR + "/TUSet.txt",
        regulondb_sites = REGULON_DIR + "/BindingSiteSet.txt",
        regulondb_gene_product = REGULON_DIR + "/GeneProductSet.txt"       
    params:
        rscript = "SnakeChunks/scripts/RSnakeChunks/misc/gene_lists_vs_regulondb.R",
        outdir = INTEGRATION_DIR,
        image_format = venn_format,
        TF = TF,
        verbose = 1
    output:
        venn = VENN,
        gene_table = TABLE,
        chip_genes_gff = GFF_CHIP,
        rna_genes_gff = GFF_RNA,
        regulon_genes_gff = GFF_REGULON,
    log: INTEGRATION_DIR + "/" + outdir_prefix + ".log"
    benchmark: INTEGRATION_DIR + "/" + outdir_prefix + "_benchmark.txt"
    conda: "../envs/gene_lists_vs_regulondb.yaml"
    shell: """
Rscript {params.rscript} \
	--chip_genes={input.chip_genes} \
	--rna_genes={input.rna_genes} \
	--gene_descriptions={input.regulondb_gene_product} \
	--TUs={input.regulondb_tus} \
	--BS={input.regulondb_sites} \
	--TFs={input.regulondb_gene_product} \
	--myTF={params.TF} \
	--venn.format={params.image_format} \
	--verbose={params.verbose} \
	--outdir={params.outdir} \
	--venn={output.venn} \
	--gene_table={output.gene_table} \
	--chip_genes_gff={output.chip_genes_gff} \
	--rna_genes_gff={output.rna_genes_gff} \
 	--regulon_genes_gff={output.regulon_genes_gff} &> {log} 
"""

#    script:
#        "../../RSnakeChunks/misc/gene_lists_comparison.R"


## Subworkflows

##subworkflow chip:
##    workdir: "ChIP-seq_RegulonDB.wf"
##    snakefile: "ChIP-seq_RegulonDB.wf"
##    configfile: "metadata/config_ChIP-seq.yml"

##subworkflow rna:
##    workdir: "RNA-seq_complete.wf"
##    snakefile: "RNA-seq_complete.wf"
##    configfile: "metadata/config_RNA-seq.yml"




