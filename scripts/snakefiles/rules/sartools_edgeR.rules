# Set parameters
if not "qsub" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "samples" in config["dir"].keys():
    sys.exit("The sample dir must be defined in the config file")

if not "diffexpr" in config["dir"].keys():
    sys.exit("The diffexpr dir must be defined in the config file")

if not "author" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "edgeR" in config.keys():
    config["edgeR"] = {}

if not "featuresToRemove" in config["edgeR"].keys():
    config["edgeR"]["featuresToRemove"] = "NULL"

if not "varInt" in config["edgeR"].keys():
    config["edgeR"]["varInt"] = "group"

if not "condRef" in config["edgeR"].keys():
    config["edgeR"]["condRef"] = "WT"

if not "batch" in config["edgeR"].keys():
    config["edgeR"]["batch"] = "NULL"

if not "alpha" in config["edgeR"].keys():
    config["edgeR"]["alpha"] = 0.05

if not "pAdjustMethod" in config["edgeR"].keys():
    config["edgeR"]["pAdjustMethod"] = "BH"

if not "cpmCutoff" in config["edgeR"].keys():
    config["edgeR"]["cpmCutoff"] = 1

if not "gene_selection" in config["edgeR"].keys():
    config["edgeR"]["gene_selection"] = "pairwise"

if not "normalizationMethod" in config["edgeR"].keys():
    config["edgeR"]["normalizationMethod"] = "TMM"

# Rule
rule sartools_edgeR:
    """
    This rule is designed to perform differential expression analysis of RNA-seq data
    with edgeR, using the R package SARTools (https://github.com/PF2-pasteur-fr/SARTools/). 

    It requires replicated data to run properly.

    Required parameters:
        config["qsub"]
        config["author"]
        config["dir"]["samples"]
        config["dir"]["diffexpr"]

    Optional parameters:
        config["edgeR"]["featuresToRemove"]
        config["edgeR"]["varInt"]
        config["edgeR"]["condRef"]
        config["edgeR"]["batch"]
        config["edgeR"]["alpha"]
        config["edgeR"]["pAdjustMethod"]
        config["edgeR"]["fitType"]
        config["edgeR"]["cpmCutoff"]
        config["edgeR"]["gene_selection"]
        config["edgeR"]["normalizationMethod"]

    Contributors: Claire Rioualen
    """
    input: 
        targetFile = "{diffexpr_dir}/{test}_vs_{ref}/{preprocess,.*}SARTools_targetfile.txt"
    output: 
        report = "{diffexpr_dir}/{test}_vs_{ref}/edgeR/{test}_vs_{ref}_{preprocess,.*}edgeR_report.html",
        gene_list = "{diffexpr_dir}/{test}_vs_{ref}/edgeR/{test}_vs_{ref}_{preprocess,.*}edgeR_gene_list.tab"
    params:
        rscript = "../../R-scripts/R/sartools_edger.R",
        wd = "{diffexpr_dir}/{test}_vs_{ref}/edgeR",
        targetFile = "{preprocess,.*}SARTools_targetfile.txt",
        rawDir = "", 
        projectName = "{test}_vs_{ref}_{preprocess,.*}edgeR",
        author = config["author"],
        featuresToRemove = config["edgeR"]["featuresToRemove"],
        varInt = config["edgeR"]["varInt"],
        condRef = config["edgeR"]["condRef"],
        batch = config["edgeR"]["batch"],
        alpha = config["edgeR"]["alpha"],
        pAdjustMethod = config["edgeR"]["pAdjustMethod"],
        cpmCutoff = config["edgeR"]["cpmCutoff"],
        gene_selection = config["edgeR"]["gene_selection"],
        normalizationMethod = config["edgeR"]["normalizationMethod"],
        qsub = config["qsub"] \
          + " -e " + "{diffexpr_dir}/{test}_vs_{ref}/edgeR/{test}_vs_{ref}_{preprocess,.*}edgeR_qsub.err" \
          + " -o " + "{diffexpr_dir}/{test}_vs_{ref}/edgeR/{test}_vs_{ref}_{preprocess,.*}edgeR_qsub.out"
    log: "{diffexpr_dir}/{test}_vs_{ref}/edgeR/{test}_vs_{ref}_{preprocess,.*}edgeR.log"
    benchmark: "{diffexpr_dir}/{test}_vs_{ref}/edgeR/{test}_vs_{ref}_{preprocess,.*}edgeR_benchmark.json"
    conda: "../envs/sartools.yaml"
    script:
        "{params.rscript} &> {log}"
#    run:
#        R("""

#        rm(list=ls())

#        library(SARTools)

#        baseDir <- getwd()

#        targetFile <- "{params.targetFile}"
#        setwd("{wildcards.diffexpr_dir}/{wildcards.test}_vs_{wildcards.ref}")
#        new.loc <- paste("edgeR/", targetFile, sep="")
#        file.copy(targetFile, new.loc)

#        setwd("edgeR")

#        colors <- c("green", "red", "blue", "pink")

#        # setting params

#        projectName <- "{params.projectName}"
#        author <- "{params.author}"

#        rawDir <- "{params.rawDir}"
#        featuresToRemove <- "{params.featuresToRemove}"
#        varInt <- "{params.varInt}"
#        condRef <- "{params.condRef}"
#        batch <- "{params.batch}"
#        alpha <- {params.alpha}
#        pAdjustMethod <- "{params.pAdjustMethod}"
#        cpmCutoff <- {params.cpmCutoff}
#        gene.selection <- "{params.gene_selection}"
#        normalizationMethod <- "{params.normalizationMethod}"
#        workDir <- "{params.wd}"

#        # checking parameters
#        checkParameters.edgeR(projectName=projectName,author=author,targetFile=targetFile,
#                              rawDir=rawDir,featuresToRemove=featuresToRemove,varInt=varInt,
#                              condRef=condRef,batch=NULL,alpha=alpha,pAdjustMethod=pAdjustMethod,
#                              cpmCutoff=cpmCutoff,gene.selection=gene.selection,
#                              normalizationMethod=normalizationMethod,colors=colors)


#        print(projectName)
#        print(targetFile)

#        # loading target file
#        target <- loadTargetFile(targetFile=targetFile, varInt=varInt, condRef=condRef, batch=NULL)

#        # loading counts
#        counts <- loadCountData(target=target, rawDir=rawDir, featuresToRemove=featuresToRemove)

#        # description plots
#        majSequences <- descriptionPlots(counts=counts, group=target[,varInt], col=colors)

#        # edgeR analysis
#        out.edgeR <- run.edgeR(counts=counts, target=target, varInt=varInt, condRef=condRef,
#                               batch=NULL, cpmCutoff=cpmCutoff, normalizationMethod=normalizationMethod,
#                               pAdjustMethod=pAdjustMethod)

#        # MDS + clustering
#        exploreCounts(object=out.edgeR$dge, group=target[,varInt], gene.selection=gene.selection, col=colors)

#        # summary of the analysis (boxplots, dispersions, export table, nDiffTotal, histograms, MA plot)
#        summaryResults <- summarizeResults.edgeR(out.edgeR, group=target[,varInt], counts=counts, alpha=alpha, col=colors)

#        # save image of the R session
#        save.image(file=paste0(projectName, ".RData"))

#        # generating HTML report
#        writeReport.edgeR(target=target, counts=counts, out.edgeR=out.edgeR, summaryResults=summaryResults,
#                          majSequences=majSequences, workDir=workDir, projectName=projectName, author=author,
#                          targetFile=targetFile, rawDir=rawDir, featuresToRemove=featuresToRemove, varInt=varInt,
#                          condRef=condRef, batch=NULL, alpha=alpha, pAdjustMethod=pAdjustMethod, colors=colors,
#                          gene.selection=gene.selection, normalizationMethod=normalizationMethod)

#        # get list of gene_ids of up/down genes
#        #up <- as.vector(read.table(paste("tables/", list.files(path = "tables", pattern = "{wildcards.test}vs{wildcards.ref}.up.txt$")[1], sep=""))[,1])
#        #down <- as.vector(read.table(paste("tables/", list.files(path = "tables", pattern = "{wildcards.test}vs{wildcards.ref}.down.txt$")[1], sep=""))[,1])

#        up <- as.vector(read.table(paste("tables/", "{wildcards.test}", "vs", "{wildcards.ref}", ".up.txt", sep="")[1])[,1])
#        down <- as.vector(read.table(paste("tables/", "{wildcards.test}", "vs", "{wildcards.ref}", ".down.txt", sep="")[1])[,1])


#        setwd(baseDir)

#        gene_list <- c(up[2:length(up)], down[2:length(down)])
#        print(gene_list)
#        write.table(gene_list, file="{output.gene_list}", row.names=F, col.names=F, quote=F)

#        sink()
#        """)

