# Set parameters
if not "qsub" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "version" in config["genome"].keys():
    sys.exit("Genome version must be defined in the config file")

if not "fasta_file" in config["genome"].keys():
    sys.exit("Fasta file must be defined in the config file")

if not "genome" in config["dir"].keys():
    sys.exit("Genome dir must be defined in the dir section of the config file")

if not "seq_type" in config["metadata"].keys():
    sys.exit("Sequencing type (single or paired ends) must be defined in the config file")

if config["metadata"]["seq_type"] == "pe" and not "strands" in config["metadata"].keys():
    sys.exit("The param metadata/strands must be defined when analysing paired end data")

if not "tophat" in config.keys():
    config["tophat"] = {}

if not "threads" in config["tophat"].keys():
    config["tophat"]["threads"] = "1"

if not "max_mismatches" in config["tophat"].keys():
    config["tophat"]["max_mismatches"] = "2"

if not "fastq" in config["dir"].keys():
    sys.exit("You must define a location for the fastq file.")

if not "samples" in config["dir"].keys():
    sys.exit("You must define a location for the sample files.")

fastq_dir = config["dir"]["fastq"]
sample_dir = config["dir"]["samples"]
seq_type = config["metadata"]["seq_type"]

# Define input files
def tophat_inputs(wildcards):
    seq_type = config["metadata"]["seq_type"]
    if (seq_type == "pe"):
        reads = expand("{fastq_dir}/{samples}/{prefix}_{strand}.fastq.gz", strand=config["metadata"]["strands"].split(), samples=wildcards.samples, fastq_dir=fastq_dir, prefix=wildcards.prefix)
    elif (seq_type == "se"):
        reads = expand("{fastq_dir}/{samples}/{prefix}.fastq.gz", samples=wildcards.samples, fastq_dir=fastq_dir, prefix=wildcards.prefix)
    else:
        sys.exit("Error: invalid sequencing type parameter. Must be 'se' or 'pe'")
    return reads

# Rule
rule tophat:
    """
    Read mapping for single or paired end data using Tophat. 
    Requires the indexing to have previously been done (using the
    rule bowtie2_index).

    Required parameters:
        config["dir"]["fastq"]
        config["dir"]["samples"]
        config["metadata"]["seq_type"]
        config["dir"]["genome"]
        config["genome"]["version"]
        config["genome"]["fasta_file"]
        config["qsub"]

    Optional parameters:
        config["tophat"]["max_mismatches"]
        config["tophat"]["threads"]

    Contributors: Claire Rioualen
    """
    input:
        reads = tophat_inputs,
        index = os.path.join(config["dir"]["genome"], "bowtie2", config["genome"]["fasta_file"])
    output:
        bam = sample_dir + "/{samples}/{prefix}_tophat.bam"
    params:
        threads = config["tophat"]["threads"], 
        outdir = sample_dir + "/{samples}/{prefix}_tophat", \
        sam = sample_dir + "/{samples}/{prefix}_bowtie2.sam", 
        unsorted_bam = sample_dir + "/{samples}/{prefix}_bowtie2_unsorted.bam", ## put it as temp() output?
        max_mismatches = config["tophat"]["max_mismatches"], \
        seq_type = config["metadata"]["seq_type"],
        qsub = config["qsub"] \
          + " -e " + sample_dir + "/{samples}/{prefix}_tophat_qsub.err" \
          + " -o " + sample_dir + "/{samples}/{prefix}_tophat_qsub.out"
    log: sample_dir + "/{samples}/{prefix}_tophat.log"
    benchmark: sample_dir + "/{samples}/{prefix}_tophat_benchmark.txt"
    conda:  "../envs/tophat.yaml"
#    run:
#        if (seq_type == "pe"):
#            shell("tophat --num-threads {params.threads} --read-mismatches {params.max_mismatches} --output-dir {params.outdir} {input.index} " + input.reads[0] + " " + input.reads[1] + " 2> {log}")
#        elif (seq_type == "se"):
#            shell("tophat --num-threads {params.threads} --read-mismatches {params.max_mismatches} --output-dir {params.outdir} {input.index} {input.reads} 2> {log}")
#        shell("mv {params.outdir}/accepted_hits.bam {output.bam} 2> {log}")
    shell:"""
if [[ "{params.seq_type}" == "pe" ]]
then
    tophat --num-threads {params.threads} --read-mismatches {params.max_mismatches} --output-dir {params.outdir} {input.index} {input.reads[0]} {input.reads[1]} 2> {log}
elif [[ "{params.seq_type}" == "se" ]]
then
    tophat --num-threads {params.threads} --read-mismatches {params.max_mismatches} --output-dir {params.outdir} {input.index} {input.reads} 2> {log}
fi
mv {params.outdir}/accepted_hits.bam {output.bam} 2> {log}
"""
#samtools view -b -S {params.sam} > {params.unsorted_bam} 2> {log}
#rm {params.sam}
#samtools sort  {params.unsorted_bam} -o {output} 2> {log}
#rm {params.unsorted_bam}
#    run:
#        if (seq_type == "pe"):
#            shell("bowtie2 -x {input.index} -1 " + input.reads[0] + " -2 " + input.reads[1] + " -S {params.sam} --phred33 -N {params.max_mismatches} --threads {params.threads} 2> {log}")
#        elif (seq_type == "se"):
#            shell("bowtie2 -x {input.index} -U {input.reads} -S {params.sam} --threads {params.threads} --phred33 -N {params.max_mismatches} 2> {log}")
#        shell("samtools view -b -S {params.sam} > {output.bam}")
#        shell("rm {params.sam}")



