# Set parameters
if not "qsub" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "fastqc" in config.keys():
    config["fastqc"] = {}

if not "other_options" in config["fastqc"].keys():
    config["fastqc"]["other_options"] = ""


#if not "input_format" in config["metadata"].keys():
#    config["metadata"]["input_format"] = "fastq"

#def fastqc_inputs(wildcards):
#    if (wildcards.ext == "bam"):
#        reads = expand("{reads}.bam", reads=wildcards.reads)
#    elif (wildcards.ext == "fastq.gz"):
#        reads = expand("{reads}.fastq.gz", reads=wildcards.reads)
#        if not "input_format" in config["metadata"].keys():
#            reads = expand("{reads}.fastq", reads=wildcards.reads)
#        else:
#            reads = expand("{reads}." + config["metadata"]["input_format"], reads=wildcards.reads)
#    else:
#        sys.exit("Error: invalid input format.")
#    return reads


# Rule
rule fastqc:
    """Check the quality of the reads in a fastq or a bam file
    using the program fastQC (quality control). Results are stored in
    folder named '{reads}_fastqc'.

    Custom parameters specified in the configuration file with the
    option config["fastqc"]["other options"] will be passed to fastQC. 

    Required parameters:
        config['qsub']

    Optional parameters:
        config['fastqc']['other_options']

    Contributors: Claire Rioualen, Lucie Khamvongsa, Jacques van Helden
    """
#    input: "{reads}.fastq.gz"
    input: "{reads}.{ext,(bam|fastq|fastq.gz)}"
#    output: "{reads}_fastqc/{sample}_fastqc.html"
    output: "{reads}_{ext}_fastqc/{sample}_{ext}_fastqc.html"
#    output: "{reads}_fastqc/{sample}_fastqc.html"
#    output: "{reads}_fastqc/{sample}.html"
    params:
        options = config["fastqc"]["other_options"], \
        outdir = "{reads}_fastqc", \
        qsub = config["qsub"] \
            + " -e {reads}_fastqc/{sample}_fastqc_qsub.err"\
            + " -o {reads}_fastqc/{sample}_fastqc_qsub.out"
    log: "{reads}_fastqc/{sample}_fastqc.log"
    benchmark: "{reads}_fastqc/{sample}_fastqc_benchmark.txt"
    conda:  "../envs/fastqc.yaml"
#    shell:"fastqc --outdir {params.outdir} --format fastq {input} {params.options} 2> {log} "
#    shell:"fastqc --outdir {params.outdir} --format {wildcards.ext} {input} {params.options} 2> {log} "
    shell:"fastqc --outdir {params.outdir} {input} {params.options} 2> {log} "
