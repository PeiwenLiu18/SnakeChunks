# Set defaults params
if not "qsub" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "metadata" in config.keys():
    sys.exit("Configuration file does not contain metadata parameters.")

if not "seq_type" in config["metadata"].keys():
    sys.exit("Sequencing type (single or paired ends) must be defined in the config file")

if config["metadata"]["seq_type"] == "pe" and not "strands" in config["metadata"].keys():
    sys.exit("The param 'seq_type' must be defined when analysing paired end data")

if not "sickle" in config.keys():
    config["sickle"] = {}

if not "qual_threshold" in config["sickle"].keys():
    config["sickle"]["qual_threshold"] = "20"

# ## Check whether input fastq files are compressed or not
# if  "input_format" in config["metadata"].keys():
#     input_ext = "." + config["metadata"]["input_format"]
# else:
#     input_ext = ".fastq.gz"
# 
# ## Compress or not the output fastq file (trimmed reads)
# gzip_option = "--gzip-output"
# gzip_ext = ".gz"
# if  "gzip_output" in config["sickle"].keys():
#     if (config["sickle"]["gzip_output"] == False):
#         gzip_option = ""
#         gzip_ext = ""

if not "length_threshold" in config["sickle"].keys():
    config["sickle"]["length_threshold"] = "30"

if not "qual" in config["sickle"].keys():
    config["sickle"]["qual"] = "sanger"

if not "fastq" in config["dir"].keys():
    sys.exit("config['dir']['fastq'] must be in the config file.")

fastq_dir = config["dir"]["fastq"]

seq_type = config["metadata"]["seq_type"]

if (seq_type == "pe"):
    strands = config["metadata"]["strands"].split()
elif (seq_type == "se"):
    strands = ["empty1","empty2"]       ## This is a temp workaround to the fact that it's not possible to have conditional outputs - 3 files are produced even in single-end settings

# Define input files
def sickle_inputs(wildcards):
    if (seq_type == "pe"):
        reads = expand(expand(config["dir"]["fastq"] + "/{dataset}/{samples}_{{strand}}.fastq.gz", zip, dataset=wildcards.dataset, samples=wildcards.samples), strand=strands)
    elif (seq_type == "se"):
        reads = expand(config["dir"]["fastq"] + "/{dataset}/{samples}.fastq.gz", dataset=wildcards.dataset, samples=wildcards.samples)[0]
    else:
        sys.exit("Error: invalid seq_type parameter. Must be 'se' or 'pe'")
    return reads

rule sickle:
    """ Trimming raw reads with sickle. This rule takes as input one or
    several raw compressed fastq-formatted read files (extension
    fastq.gz), and produce fastq-formatted files, which are by default
    compressed (by activating fastqc option --gzip-output). 

    Required parameters:
        config["qsub"]
        config["metadata"]["seq_type"]

    Optional parameters:
        config["sickle"]["qual_threshold"]
        config["sickle"]["length_threshold"]
        config["sickle"]["qual_type"]
        config["metadata"]["strands"]
        config["sickle"]["gzip_output"] (default: True). If False, the output fastq files (trimmed reads) are not compressed.

    Contributors: Claire Rioualen, Lucie Khamvongsa & Jacques van Helden
    """
    input: reads = sickle_inputs
    output:
        forward = config["dir"]["fastq"] + "/{dataset}/{samples}_sickle_" + strands[0] + ".fastq.gz",
        reverse = config["dir"]["fastq"] + "/{dataset}/{samples}_sickle_" + strands[1] + ".fastq.gz",
        single = config["dir"]["fastq"] + "/{dataset}/{samples}_sickle.fastq.gz",
        stats = config["dir"]["fastq"] + "/{dataset}/{samples}_sickle_stats.txt"
    params:
        qual_threshold = config["sickle"]["qual_threshold"],
        length_threshold = config["sickle"]["length_threshold"],
        qual_type = config["sickle"]["qual"],
        gzip_option = "--gzip-output",
        seq_type = config["metadata"]["seq_type"],
        qsub = config['qsub'] \
            + " -e "+ config["dir"]["fastq"] + "/{dataset}/{samples}_sickle_qsub.err" \
            + " -o "+ config["dir"]["fastq"] + "/{dataset}/{samples}_sickle_qsub.out"
    log: config["dir"]["fastq"] + "/{dataset}/{samples}_sickle.log"
    benchmark: config["dir"]["fastq"] + "/{dataset}/{samples}_sickle_benchmark.txt"
    conda: "../envs/sickle.yaml"
    shell:"""
if [[ "{params.seq_type}" == "pe" ]]
then
        sickle pe --pe-file1={input.reads[0]} --pe-file2={input.reads[1]} --qual-type={params.qual_type} --qual-threshold={params.qual_threshold} --length-threshold={params.length_threshold} --output-pe1={output.forward} --output-pe2={output.reverse} --output-single={output.single} {params.gzip_option} 1> {output.stats} 2> {log}
elif [[ "{params.seq_type}" == "se" ]]
then
    sickle se --fastq-file={input} --qual-type={params.qual_type} -q={params.qual_threshold} -l={params.length_threshold} --output-file={output.single} {params.gzip_option}  1> {output.stats} 2> {log}
    touch {output.forward} {output.reverse}
fi
"""
#    run:
#        if (seq_type == "pe"):
#            shell("sickle pe --pe-file1 " + input.reads[0] + " --pe-file2 " + input.reads[1] + " --qual-type {params.qual_type} -q {params.qual_threshold} -l {params.length_threshold} --output-pe1 {output.forward} --output-pe2 {output.reverse} --output-single {output.single} 2> {log}")
#        elif (seq_type == "se"):
#            shell("sickle se --fastq-file {input} --qual-type {params.qual_type} -q {params.qual_threshold} -l {params.length_threshold} --output-file {output.single} &> {log}")
#            shell("touch {output.forward} {output.reverse}")




