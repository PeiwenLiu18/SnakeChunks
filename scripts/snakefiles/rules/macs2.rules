# Set parameters
if not "qsub" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "size" in config["genome"].keys():
    sys.exit("The parameter genome size must be defined in the config file")

if not "macs2" in config.keys():
    config["macs2"] = {}

if not "qval" in config["macs2"].keys():
    config["macs2"]["qval"] = "0.05"

if not "keep_dup" in config["macs2"].keys():
    config["macs2"]["keep_dup"] = "1"

if not "band_width" in config["macs2"].keys():
    config["macs2"]["band_width"] = "300"

if not "mfold_min" in config["macs2"].keys():
    config["macs2"]["mfold_min"] = "5"

if not "mfold_max" in config["macs2"].keys():
    config["macs2"]["mfold_max"] = "50"

if not "other_options" in config["macs2"].keys():
    config["macs2"]["other_options"] = ""

if not "type" in config["macs2"].keys():
    config["macs2"]["type"] = "narrow"

if not "samples" in config["dir"].keys():
    sys.exit("The sample dir must be defined in the config file")

if not "peaks" in config["dir"].keys():
    sys.exit("The peaks dir must be defined in the config file")

dir_samples = config["dir"]["samples"]
dir_macs2 = os.path.join(config["dir"]["peaks"], "{dataset}/{treatment}_vs_{control}/macs2")

# Rule
rule macs2:
    """Peak-calling with MACS2.
    Input: bed
    Output: bed

    Required parameters:
        config["dir"]["samples"]
        config["dir"]["peaks"]
        config["genome"]["size"]
        config["qsub"]

    Optional parameters:
        config["macs2"]["qval"]
        config["macs2"]["keep_dup"]
        config["macs2"]["band_width"]
        config["macs2"]["mfold_min"]
        config["macs2"]["mfold_max"]
        config["macs2"]["other_options"]
        config["macs2"]["type"]

    Contributors: Claire Rioualen, Lucie Khamvongsa
    """
    input:
        treatment = dir_samples + "/{dataset}/{treatment}{preprocess,.*}.bed",
        control = dir_samples + "/{dataset}/{control}{preprocess,.*}.bed"
    output:
        peaks = dir_macs2 + "/{treatment}_vs_{control}{preprocess,.*}_macs2_peaks." + config["macs2"]["type"] + "Peak",
        peaks_bed = dir_macs2 + "/{treatment}_vs_{control}{preprocess,.*}_macs2.bed"
    params:
        outdir = dir_macs2,
        name = "{treatment}_vs_{control}{preprocess,.*}_macs2",
        qval = config["macs2"]["qval"],
        keep_dup = config["macs2"]["keep_dup"],
        band_width = config["macs2"]["band_width"],
        mfold_min = config["macs2"]["mfold_min"],
        mfold_max = config["macs2"]["mfold_max"],
        other_options = config["macs2"]["other_options"],
        genome_size = config["genome"]["size"],
        qsub = config["qsub"] \
          + " -e " + dir_macs2 + "/{treatment}_vs_{control}{preprocess,.*}_macs2_qsub.err" \
          + " -o " + dir_macs2 + "/{treatment}_vs_{control}{preprocess,.*}_macs2_qsub.out"
    log: dir_macs2 + "/{treatment}_vs_{control}{preprocess,.*}_macs2.log"
    benchmark: dir_macs2 + "/{treatment}_vs_{control}{preprocess,.*}_macs2_benchmark.txt"
    conda:  "../envs/macs2.yaml"
    shell: """
(macs2 \
callpeak -t {input.treatment} -c {input.control} --gsize {params.genome_size} \
--qvalue {params.qval} \
--keep-dup {params.keep_dup} \
--bdg \
--bw {params.band_width} \
--mfold {params.mfold_min} {params.mfold_max} \
--outdir {params.outdir} --name {params.name} \
{params.other_options} ; \
cp {output.peaks} {output.peaks_bed}) &> {log}
"""
