# Set parameters
if not "qsub" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "gff3_file" in config["genome"].keys():
    sys.exit("GFF3 file must be defined in the config file")

if not "genome" in config["dir"].keys():
    sys.exit("Genome dir must be defined in the dir section of the config file")

# Define paths
gff3_file = os.path.join(config["dir"]["genome"], config["genome"]["gff3_file"])

rule bedtools_closest:
    """
    Similar to intersect, closest searches for overlapping features in A and B. 
    In the event that no feature in B overlaps the current feature in A, closest will report the nearest 
    (that is, least genomic distance from the start or end of A) feature in B. 

    Usage: bedtools closest [OPTIONS] -a <FILE> -b <FILE1, FILE2, ..., FILEN>

    More: http://bedtools.readthedocs.io/en/latest/content/tools/closest.html

    Required parameters: 
        config["qsub"]
        config["dir"]["genome"]
        config["genome"]["gff3_file"]

    Contributors: Claire Rioualen
    """
	input: bed = "{regions}.bed", gff3 = gff3_file
	output: "{regions}_closest_annot.bed"
	log: "{regions}_closest.log"
	benchmark: "{regions}_closest_benchmark.txt"
	params: qsub = config["qsub"] + " -e {regions}_closest_qsub.err -o {regions}_closest_qsub.out"
	conda: "../envs/bedtools.yaml"
	shell:"""bedtools closest -a {input.bed} -b {input.gff3} > {output}"""

