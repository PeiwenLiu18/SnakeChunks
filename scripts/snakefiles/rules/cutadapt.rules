# Drafted from sickle.rules, currently working only for single end data

# Set defaults params
if not "qsub" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "seq_type" in config["metadata"].keys():
    sys.exit("Sequencing type (single or paired ends) must be defined in the config file")

if config["metadata"]["seq_type"] == "pe" and not "strands" in config["metadata"].keys():
    sys.exit("The param 'seq_type' must be defined when analysing paired end data")

if not "cutadapt" in config.keys():
    config["cutadapt"] = {}

if not "qual_threshold" in config["cutadapt"].keys():
    config["cutadapt"]["qual_threshold"] = "20"

if not "length_threshold" in config["cutadapt"].keys():
    config["cutadapt"]["length_threshold"] = "20"

if not "fastq" in config["dir"].keys():
    sys.exit("config['dir']['fastq'] must be in the config file.")

fastq_dir = config["dir"]["fastq"]

seq_type = config["metadata"]["seq_type"]

if (seq_type == "pe"):
    strands = config["metadata"]["strands"].split()
elif (seq_type == "se"):
    strands = ["empty1","empty2"]       ## This is a temp workaround to the fact that it's not possible to have conditional outputs - 3 files are produced even in single-end settings

# Define input files
def cutadapt_inputs(wildcards):
    if not "input_format" in config["metadata"].keys():
        ext = "fastq"
    else:
        ext = config["metadata"]["input_format"]
    if (seq_type == "pe"):
        reads = expand("{fastq_dir}/{samples}/{samples}_{strand}." + ext, strand=strands, samples=wildcards.samples, fastq_dir=fastq_dir)
#        sys.exit("Sorry; cutadapt currently only works with single-end data")
    elif (seq_type == "se"):
        reads = expand("{fastq_dir}/{samples}/{samples}." + ext, samples=wildcards.samples, fastq_dir=fastq_dir)
    else:
        sys.exit("Error: invalid seq_type parameter. Must be 'se' or 'pe'")
    return reads

rule cutadapt:
    """Trim one a single end raw reads file with cutadapt.

    Required parameters:
        config["qsub"]
        config["metadata"]["seq_type"]

    Optional parameters:
        config["cutadapt"]["length_threshold"]
        config["cutadapt"]["qual_threshold"]
        config["metadata"]["strands"]

    Contributors: Claire Rioualen
    """
    input: reads = cutadapt_inputs
    output:
        forward = config["dir"]["fastq"] + "/{samples}/{samples}_cutadapt_" + strands[0] + ".fastq.gz",
        reverse = config["dir"]["fastq"] + "/{samples}/{samples}_cutadapt_" + strands[1] + ".fastq.gz",
        fastq = config["dir"]["fastq"] + "/{samples}/{samples}_cutadapt.fastq.gz"
    params:
        qual_threshold = config["cutadapt"]["qual_threshold"],
        length_threshold = config["cutadapt"]["length_threshold"],
        temp_output_se = config["dir"]["fastq"] + "/{samples}/{samples}_trimmed.fq.gz",
        temp_output_pe_1 = config["dir"]["fastq"] + "/{samples}/{samples}_" + strands[0] + "_val_" + strands[0] + ".fq.gz",
        temp_output_pe_2 = config["dir"]["fastq"] + "/{samples}/{samples}_" + strands[1] + "_val_" + strands[1] + ".fq.gz",
        seq_type = config["metadata"]["seq_type"],
#        temp_output_pe_1 = config["dir"]["fastq"] + "/{samples}/{samples}_trimmed_" + strands[0] + ".fq.gz",
#        temp_output_pe_2 = config["dir"]["fastq"] + "/{samples}/{samples}_trimmed_" + strands[1] + ".fq.gz",
        outdir = config["dir"]["fastq"] + "/{samples}",
        qsub = config['qsub'] \
            + " -e "+ config["dir"]["fastq"] + "/{samples}/{samples}_cutadapt_qsub.err" \
            + " -o "+ config["dir"]["fastq"] + "/{samples}/{samples}_cutadapt_qsub.out"
    log: config["dir"]["fastq"] + "/{samples}/{samples}_cutadapt.log"
    benchmark: config["dir"]["fastq"] + "/{samples}/{samples}_cutadapt_benchmark.txt"
    conda:  "../envs/cutadapt.yaml"
#    run:
#        if (seq_type == "pe"):
##            shell("cutadapt pe --pe-file1 " + input.reads[0] + " --pe-file2 " + input.reads[1] + " --qual-type {params.qual_type} --qual-threshold {params.threshold} --output-pe1 {output.forward} --output-pe2 {output.reverse} --output-single {output.single} 2> {log}")
#            shell("""
#trim_galore --length {params.length_threshold} --quality {params.qual_threshold} -o {params.outdir} --paired {input} &> {log};
#mv {params.temp_output_pe_1} {output.forward} &> {log};
#mv {params.temp_output_pe_2} {output.reverse} &> {log}
#""")
#        if (seq_type == "se"):
#            shell("trim_galore --length {params.length_threshold} --quality {params.qual_threshold} -o {params.outdir} {input} &> {log}")
#            shell("mv {params.temp_output_se} {output.fastq}")
#            shell("touch {output.forward} {output.reverse}")
    shell:"""
if [ "{params.seq_type}" == "pe" ]
then
    trim_galore --length {params.length_threshold} --quality {params.qual_threshold} -o {params.outdir} --paired {input} &> {log};
    mv {params.temp_output_pe_1} {output.forward} ;
    mv {params.temp_output_pe_2} {output.reverse} 
elif [ "{params.seq_type}" == "se" ]
then
    trim_galore --length {params.length_threshold} --quality {params.qual_threshold} -o {params.outdir} {input} &> {log}
    mv {params.temp_output_se} {output.fastq}
    touch {output.forward} {output.reverse}
fi
"""



#trim_galore -o . --paired GSM1010244_1.fastq.gz GSM1010244_2.fastq.gz
#GSM1010244_1_val_1.fq.gz


