# Set parameters
if not "qsub" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "fasta_file" in config["genome"].keys():
    sys.exit("fasta file must be defined in the config file")

if not "gtf_file" in config["genome"].keys():
    sys.exit("GTF file must be defined in the config file")

if not "genome" in config["dir"].keys():
    sys.exit("Genome dir must be defined in the dir section of the config file")

# Define paths
gtf_file = os.path.join(config["dir"]["genome"], config["genome"]["gtf_file"])
fasta_file = os.path.join(config["dir"]["genome"], config["genome"]["fasta_file"])

# Rule
rule annotate_peaks:
    """
    This rule runs a program that is part of the HOMER tools suite. 
    It outputs a list of gene identifiers using a bed file, a fasta file and a gtf file. 

    More: http://homer.salk.edu/homer/ngs/annotation.html

    Required parameters: 
        config["qsub"]
        config["dir"]["genome"]
        config["genome"]["fasta_file"]
        config["genome"]["gtf_file"]

    Contributors: Claire Rioualen
    """
    input: 
        bed = "{regions}.bed",
        fasta = fasta_file,
        gtf = gtf_file
    output: 
      peaks_to_transcripts = "{regions}_peaks_to_transcripts.tsv",
      transcript_list = "{regions}_transcript_list.tsv",
      gene_list = "{regions}_gene_list.txt"
    log: "{regions}_gene_list.log"
    benchmark: "{regions}_gene_list_benchmark.txt"
    params: 
        transcripts_to_genes =  gtf_file + "_transcript.tsv",
        qsub = config["qsub"] + " -e {regions}_gene_list_qsub.err -o {regions}_gene_list_qsub.out"
    conda: "../envs/homer.yaml"
    shell:
        """annotatePeaks.pl {input.bed} {input.fasta} -gtf {input.gtf} > {output.peaks_to_transcripts}; 
cut -f 11 {output.peaks_to_transcripts} | sort -u  > {output.transcript_list} ; 
awk '$3==\"transcript\"' {input.gtf} \
  | perl -pe 's|;|\t|g' \
  | perl -pe 's| "|\t|g' \
  | perl -pe 's|"||g' \
  | cut -f 1-8,10,12,14,16,18,20,22,24,26,28,30 > {params.transcripts_to_genes} ;
grep -f {output.transcript_list}  {params.transcripts_to_genes} | cut -f 9 | sort -u > {output.gene_list}
"""
#    run:
#        shell("annotatePeaks.pl {input.bed} {input.fasta} -gtf {input.gtf} > {output}")
#        R("""
#tab <- read.table("{output}", sep="\t", header=T)
#gene_list <- unique(sort(tab[,"Nearest.PromoterID"]))
#write.table(gene_list, file="{output}", row.names=F, col.names=F, quote=F)
#""")



