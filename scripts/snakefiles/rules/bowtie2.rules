# Set parameters
if not "qsub" in config.keys():
    sys.exit("The parameter qsub must be defined in the config file")

if not "version" in config["genome"].keys():
    sys.exit("Genome version must be defined in the config file")

if not "fasta_file" in config["genome"].keys():
    sys.exit("Fasta_file must be defined in the config file")

if not "genome" in config["dir"].keys():
    sys.exit("Genome dir must be defined in the dir section of the config file")

if not "seq_type" in config["metadata"].keys():
    sys.exit("Sequencing type (single or paired ends) must be defined in the config file")

if config["metadata"]["seq_type"] == "pe" and not "strands" in config["metadata"].keys():
    sys.exit("The param metadata/strands must be defined when analysing paired end data")

if not "bowtie2" in config.keys():
    config["bowtie2"] = {}

if not "threads" in config["bowtie2"].keys():
    config["bowtie2"]["threads"] = "1"

if not "max_mismatches" in config["bowtie2"].keys():
    config["bowtie2"]["max_mismatches"] = "0"

if not "fastq" in config["dir"].keys():
    sys.exit("You must define a location for the fastq files.")

if not "samples" in config["dir"].keys():
    sys.exit("You must define a location for the sample files.")

fastq_dir = config["dir"]["fastq"]
sample_dir = config["dir"]["samples"]
seq_type = config["metadata"]["seq_type"]

# Define input files
def bowtie2_inputs(wildcards):
    seq_type = config["metadata"]["seq_type"]
    if (seq_type == "pe"):
        reads = expand("{fastq_dir}/{samples}/{prefix}_{strand}.fastq", strand=config["metadata"]["strands"].split(), samples=wildcards.samples, fastq_dir=fastq_dir, prefix=wildcards.prefix)
    elif (seq_type == "se"):
        reads = expand("{fastq_dir}/{samples}/{prefix}.fastq", samples=wildcards.samples, fastq_dir=fastq_dir, prefix=wildcards.prefix)
    else:
        sys.exit("Error: invalid sequencing type parameter. Must be 'se' or 'pe'")
    return reads

# Rule
rule bowtie2:
    """Read mapping for single end data using Bowtie2. 
    Requires the indexing to have previously been done (using the
    rule bowtie2_index).

    Required parameters:
        config["genome"]["version"]
        config["genome"]["fasta_file"]
        config["qsub"]
        config["dir"]["fastq"]
        config["dir"]["samples"]

    Optional parameters:
        config["bowtie2"]["threads"]
        config["bowtie2"]["max_mismatches"]

    Copyright Claire Rioualen
    """
    input:
        reads = bowtie2_inputs, 
        index = os.path.join(config["dir"]["genome"], "bowtie2", config["genome"]["fasta_file"])
    output:
        bam = sample_dir + "/{samples}/{prefix}_bowtie2.bam"
    params:
        sam = sample_dir + "/{samples}/{prefix}_bowtie2.sam", 
        max_mismatches = config["bowtie2"]["max_mismatches"], 
        threads = config["bowtie2"]["threads"], 
        qsub = config["qsub"] \
          + " -e " + sample_dir + "/{samples}/{prefix}_bowtie2_qsub.err" \
          + " -o " + sample_dir + "/{samples}/{prefix}_bowtie2_qsub.out"
    log: sample_dir + "/{samples}/{prefix}_bowtie2.log"
    benchmark: sample_dir + "/{samples}/{prefix}_bowtie2_benchmark.json"
    run:
        if (seq_type == "pe"):
            shell("bowtie2 -x {input.index} -1 " + input.reads[0] + " -2 " + input.reads[1] + " -S {params.sam} --phred33 -N {params.max_mismatches} --threads {params.threads} 2> {log}")
        elif (seq_type == "se"):
            shell("bowtie2 -x {input.index} -U {input.reads} -S {params.sam} --threads {params.threads} --phred33 -N {params.max_mismatches} 2> {log}")
        shell("samtools view -b -S {params.sam} > {output.bam}")
        shell("rm {params.sam}")



